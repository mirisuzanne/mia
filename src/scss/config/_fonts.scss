@use 'sass:meta';
@use 'sass:map';
@use '../../../node_modules/sassdoc-theme-herman/scss/utilities' as herman;
@use '../../../node_modules/accoutrement/sass/tools';

/// # Font Configuration
/// @group config-fonts

$font-stack: (
  'Consolas',
  'Menlo',
  'Monaco',
  'Lucida Console',
  'Liberation Mono',
  'DejaVu Sans Mono',
  'Bitstream Vera Sans Mono',
  'Courier New',
  'monospace'
);

// Static Font
// --------------
/// @group config-fonts
/// @font static
$static-font: (
  name: 'Recursive Sans',
  normal: (
    woff2: 'RecursiveSansLnrSt-Regular.woff2',
  ),
  bold: (
    woff2: 'RecursiveSansLnrSt-Bold.woff2',
  ),
  italic: (
    woff2: 'RecursiveSansLnrSt-Italic.woff2',
  ),
  stack: $font-stack,
);

@include tools.add-font('static', $static-font);
@include herman.herman-add('font', 'static', $static-font);

// Mono Font
// ---------
/// @group config-fonts
/// @font mono
$mono-font: (
  name: 'Recursive Mono',
  normal: (
    woff2: 'RecursiveMonoLnrSt-Regular.woff2',
  ),
  bold: (
    woff2: 'RecursiveMonoLnrSt-Bold.woff2',
  ),
  italic: (
    woff2: 'RecursiveMonoLnrSt-Italic.woff2',
  ),
  stack: $font-stack,
);

@include tools.add-font('mono', $mono-font);
@include herman.herman-add('font', 'mono', $mono-font);

// Recursive Font
// --------------
/// @group config-fonts
$recursive-font: (
  name: 'Recursive',
  stack: $font-stack,
);

@include tools.add-font('recursive', $recursive-font);
@include herman.herman-add('font', 'recursive', $recursive-font);

$_variants: (
  body: (
    --mono: 0,
    --casl: 0,
    --wght: 400,
    --slnt: 0,
    --ital: 0.5,
  ),
  code: (
    --mono: 1,
  ),
  italic: (
    font-style: italic,
    --slnt: -15,
  ),
  fun: (
    --casl: 1,
  ),
  light: (
    font-weight: 200,
    --wght: 200,
  ),
  bold: (
    font-weight: bold,
    --wght: 600,
  ),
  extra: (
    font-weight: bold,
    --wght: 1000,
  ),
);

@mixin var($name, $settings: true) {
  @if ($settings) {
    font-variation-settings: 'MONO' var(--mono), 'CASL' var(--casl),
      'wght' var(--wght), 'slnt' var(--slnt), 'ital' var(--ital);
  }

  $name: if($name, $name, ('body'));
  $map: ();

  @each $var in $name {
    $var: tools.get-token($_variants, $var);
    $map: map.merge($map, $var);
  }

  @each $prop, $val in $map {
    #{$prop}: #{$val};
  }
}
